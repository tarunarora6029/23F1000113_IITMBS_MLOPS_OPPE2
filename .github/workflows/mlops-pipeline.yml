name: Heart Disease MLOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GKE_CLUSTER: heart-disease-cluster
  GKE_ZONE: us-central1-c
  IMAGE: heart-disease-model

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.check.outputs.continue }}
    steps:
    - uses: actions/checkout@v4
    - name: Check if deployment needed
      id: check
      run: echo "continue=true" >> $GITHUB_OUTPUT

  # Step 1: Explainability Analysis
  explainability:
    runs-on: ubuntu-latest
    needs: setup-and-test
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Step 1 - Explainability
      run: |
        python scripts/step1_explainability.py
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: step1-results
        path: |
          results/step1_explainability/
          models/

  # Step 2: Fairness Testing
  fairness:
    runs-on: ubuntu-latest
    needs: explainability
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download model
      uses: actions/download-artifact@v4
      with:
        name: step1-results
        
    - name: Run Step 2 - Fairness
      run: |
        python scripts/step2_fairness.py
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: step2-results
        path: results/step2_fairness/

  # Step 3: Build and Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [explainability, fairness]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup GCloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure Docker
      run: gcloud auth configure-docker
      
    - name: Download model
      uses: actions/download-artifact@v4
      with:
        name: step1-results
        
    - name: Build and Push Docker
      run: |
        docker build -t gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        
    - name: Deploy to GKE
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
        scripts/deploy.sh gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA

  # Step 4: API Testing
  api-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Setup GCloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Install dependencies
      run: pip install requests numpy pandas
      
    - name: Run Step 4 - API Testing
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
        python scripts/step4_api_testing.py
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: step4-results
        path: results/step4_api_testing/

  # Step 5: Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: api-test
    steps:
    - uses: actions/checkout@v4
    
    - name: Install wrk
      run: |
        sudo apt-get update
        sudo apt-get install -y wrk
        
    - name: Setup GCloud
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Run Step 5 - Performance Testing
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE
        bash scripts/step5_performance.sh
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: step5-results
        path: results/step5_performance/

  # Step 6: Drift Detection
  drift:
    runs-on: ubuntu-latest
    needs: explainability
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download model
      uses: actions/download-artifact@v4
      with:
        name: step1-results
        
    - name: Run Step 6 - Drift Detection
      run: python scripts/step6_drift.py
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: step6-results
        path: results/step6_drift/

  # Step 7: Security Testing
  security:
    runs-on: ubuntu-latest
    needs: explainability
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download model
      uses: actions/download-artifact@v4
      with:
        name: step1-results
        
    - name: Run Step 7 - Security Testing
      run: python scripts/step7_security.py
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: step7-results
        path: results/step7_security/

  # Final Report
  report:
    runs-on: ubuntu-latest
    needs: [explainability, fairness, api-test, performance, drift, security]
    if: always()
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: pip install jinja2 matplotlib seaborn pandas
      
    - name: Download all results
      uses: actions/download-artifact@v4
      with:
        pattern: "*-results"
        merge-multiple: true
      
    - name: Generate Report
      run: |
        mkdir -p final_report
        python -c "
import os, json, glob
from datetime import datetime

# Create simple summary report
report = []
report.append('# MLOps Pipeline Results Summary')
report.append(f'Generated: {datetime.now().isoformat()}')
report.append('')

# Check for result files
result_dirs = glob.glob('results/step*')
for result_dir in sorted(result_dirs):
    step_name = os.path.basename(result_dir).replace('_', ' ').title()
    report.append(f'## {step_name}')
    
    json_files = glob.glob(f'{result_dir}/*.json')
    if json_files:
        report.append('✅ Analysis completed')
        try:
            with open(json_files[0], 'r') as f:
                data = json.load(f)
                if isinstance(data, dict) and 'timestamp' in data:
                    report.append(f'Completed: {data[\"timestamp\"]}')
        except:
            pass
    else:
        report.append('❌ No results found')
    report.append('')

# Write report
with open('final_report/summary.md', 'w') as f:
    f.write('\n'.join(report))
        
print('Report generated successfully!')
        "
      
    - name: Upload Final Report
      uses: actions/upload-artifact@v4
      with:
        name: final-report
        path: final_report/
